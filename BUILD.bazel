load("@rules_erlang//:erlang_bytecode2.bzl", "erlang_bytecode", "erlc_opts")
load("@rules_erlang//:erlang_app.bzl", "erlang_app", "test_erlang_app")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:ct.bzl", "assert_suites2", "ct_test")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("@rules_erlang//gazelle:def.bzl", "GAZELLE_ERLANG_RUNTIME_DEPS")

gazelle(
    name = "gazelle",
    data = GAZELLE_ERLANG_RUNTIME_DEPS,
    gazelle = "@rules_erlang//gazelle:gazelle_erlang_binary",
)

gazelle(
    name = "gazelle-update-repos",
    command = "update-repos",
    data = GAZELLE_ERLANG_RUNTIME_DEPS,
    extra_args = [
        "--verbose",
        "--build_files_dir=bazel",
        "--recurse_with=gazelle-update-repos",
    ],
    gazelle = "@rules_erlang//gazelle:gazelle_erlang_binary",
)

# gazelle:exclude .github
# gazelle:exclude bazel
# gazelle:exclude config
# gazelle:exclude interop

# gazelle:erlang_generate_fewer_bytecode_rules

erlc_opts(
    name = "erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
        ],
    }),
    visibility = [":__subpackages__"],
)

erlc_opts(
    name = "test_erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
            "-DTEST=1",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
            "-DTEST=1",
        ],
    }),
    visibility = [":__subpackages__"],
)

plt(
    name = "base_plt",
    visibility = [":__subpackages__"],
)

erlang_bytecode(
    name = "other_beam",
    srcs = glob(["src/**/*.erl"]),
    hdrs = [":public_and_private_hdrs"],
    app_name = "grpcbox",
    dest = "ebin",
    erlc_opts = "//:erlc_opts",
    deps = [
        "@acceptor_pool//:erlang_app",
        "@chatterbox//:erlang_app",
    ],
)

erlang_bytecode(
    name = "test_other_beam",
    testonly = True,
    srcs = glob(["src/**/*.erl"]),
    hdrs = [":public_and_private_hdrs"],
    app_name = "grpcbox",
    dest = "test",
    erlc_opts = "//:test_erlc_opts",
    deps = [
        "@acceptor_pool//:erlang_app",
        "@chatterbox//:erlang_app",
    ],
)

filegroup(
    name = "beam_files",
    srcs = [":other_beam"],
)

filegroup(
    name = "test_beam_files",
    testonly = True,
    srcs = [":test_other_beam"],
)

erlang_bytecode(
    name = "grpcbox_SUITE_beam_files",
    testonly = True,
    srcs = ["test/grpcbox_SUITE.erl"],
    outs = ["test/grpcbox_SUITE.beam"],
    hdrs = ["include/grpcbox.hrl"],
    erlc_opts = "//:test_erlc_opts",
    deps = ["@opencensus//:erlang_app"],
)

erlang_bytecode(
    name = "test_route_guide_pb_beam",
    testonly = True,
    srcs = ["test/route_guide_pb.erl"],
    outs = ["test/route_guide_pb.beam"],
    erlc_opts = "//:test_erlc_opts",
)

erlang_bytecode(
    name = "test_routeguide_route_guide_beam",
    testonly = True,
    srcs = ["test/routeguide_route_guide.erl"],
    outs = ["test/routeguide_route_guide.beam"],
    hdrs = ["include/grpcbox.hrl"],
    erlc_opts = "//:test_erlc_opts",
)

erlang_bytecode(
    name = "test_routeguide_route_guide_bhvr_beam",
    testonly = True,
    srcs = ["test/routeguide_route_guide_bhvr.erl"],
    outs = ["test/routeguide_route_guide_bhvr.beam"],
    erlc_opts = "//:test_erlc_opts",
)

erlang_bytecode(
    name = "test_routeguide_route_guide_client_beam",
    testonly = True,
    srcs = ["test/routeguide_route_guide_client.erl"],
    outs = ["test/routeguide_route_guide_client.beam"],
    erlc_opts = "//:test_erlc_opts",
    deps = ["@grpcbox//:erlang_app"],
)

erlang_bytecode(
    name = "test_test_stats_handler_beam",
    testonly = True,
    srcs = ["test/test_stats_handler.erl"],
    outs = ["test/test_stats_handler.beam"],
    erlc_opts = "//:test_erlc_opts",
)

filegroup(
    name = "srcs",
    srcs = glob([
        "src/**/*.app.src",
        "src/**/*.erl",
    ]),
)

filegroup(
    name = "private_hdrs",
    srcs = glob(["src/**/*.hrl"]),
)

filegroup(
    name = "public_hdrs",
    srcs = glob(["include/**/*.hrl"]),
)

filegroup(
    name = "priv",
    srcs = glob(["priv/**/*"]),
)

filegroup(
    name = "license_files",
    srcs = glob(["LICENSE*"]),
)

filegroup(
    name = "public_and_private_hdrs",
    srcs = [
        ":private_hdrs",
        ":public_hdrs",
    ],
)

filegroup(
    name = "all_srcs",
    srcs = [
        ":public_and_private_hdrs",
        ":srcs",
    ],
)

erlang_app(
    name = "erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_hdrs"],
    app_name = "grpcbox",
    beam_files = [":beam_files"],
    license_files = [":license_files"],
    priv = [":priv"],
    deps = [
        "@acceptor_pool//:erlang_app",
        "@chatterbox//:erlang_app",
        "@ctx//:erlang_app",
        "@gproc//:erlang_app",
        "@opencensus//:erlang_app",
    ],
)

alias(
    name = "grpcbox",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

test_erlang_app(
    name = "test_erlang_app",
    srcs = [":all_srcs"],
    hdrs = [":public_and_private_hdrs"],
    app_name = "grpcbox",
    beam_files = [":test_beam_files"],
    license_files = [":license_files"],
    priv = [":priv"],
    deps = [
        "@acceptor_pool//:erlang_app",
        "@chatterbox//:erlang_app",
        "@ctx//:erlang_app",
        "@gproc//:erlang_app",
        "@opencensus//:erlang_app",
    ],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    for_target = ":erlang_app",
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    compiled_suites = [
        ":test_route_guide_pb_beam",
        ":test_routeguide_route_guide_beam",
        ":test_routeguide_route_guide_bhvr_beam",
        ":test_routeguide_route_guide_client_beam",
        ":test_test_stats_handler_beam",
    ],
    target = ":test_erlang_app",
)

ct_test(
    name = "grpcbox_SUITE",
    compiled_suites = [
        ":grpcbox_SUITE_beam_files",
        "test/route_guide_pb.beam",  # keep
        "test/routeguide_route_guide.beam",  # keep
        "test/routeguide_route_guide_client.beam",
        "test/test_stats_handler.beam",  # keep
    ],
    data = glob(["test/grpcbox_SUITE_data/**/*"]),
    deps = [
        ":test_erlang_app",
        "@chatterbox//:erlang_app",
        "@ctx//:erlang_app",
        "@opencensus//:erlang_app",
    ],
)

assert_suites2()
